var drawingTools = Map.drawingTools();
//Random Forest
var marakele = ee.FeatureCollection("users/DanikaSaayman/Marakele_Extended");
var s2 = ee.ImageCollection("COPERNICUS/S2_SR");
var wetlands = ee.FeatureCollection("users/DanikaSaayman/Wetlands");
var alos = ee.Image("JAXA/ALOS/AW3D30/V2_2");

var geometry = marakele.geometry();
Map.centerObject(geometry,11);

// Display the input composite and wetlands.
var composite = ee.Image("users/DanikaSaayman/Atmos_Cor_Wet");

var Color_comp_01 = {bands:"B4,B3,B2", min: 0.0, max: 0.2, gamma: 1};
Map.addLayer(composite, Color_comp_01, 'image');
Map.addLayer(wetlands, {color: 'red'}, 'Wetlands');

 // calculate indices to be added
 var addIndices = function(image) {
   var ndvi = image.normalizedDifference(['B8', 'B4']).rename(['ndvi']);
   var ndwi = image.normalizedDifference(['B3', 'B8']).rename(['ndwi']);
   var msavi2 = image.expression(
      '(2 * NIR + 1 - sqrt(pow((2 * NIR + 1), 2) - 8 * (NIR - RED)) ) / 2', 
  {
    'NIR': composite.select('B8'), 
    'RED': composite.select('B4')
  }).rename('msavi2');
   return image.addBands(ndvi).addBands(ndwi).addBands(msavi2);
 };

var composite = addIndices(composite);

// Function to Normalize Image
// Pixel Values should be between 0 and 1
// Formula is (x - xmin) / (xmax - xmin)
//************************************************************************** 
function normalize(image){
  var bandNames = image.bandNames();
  // Compute min and max of the image
  var minDict = image.reduceRegion({
    reducer: ee.Reducer.min(),
    geometry: geometry,
    scale: 20,
    maxPixels: 1e9,
    bestEffort: true,
    tileScale: 16
  });
  var maxDict = image.reduceRegion({
    reducer: ee.Reducer.max(),
    geometry: geometry,
    scale: 20,
    maxPixels: 1e9,
    bestEffort: true,
    tileScale: 16
  });
  var mins = ee.Image.constant(minDict.values(bandNames));
  var maxs = ee.Image.constant(maxDict.values(bandNames));

  var normalized = image.subtract(mins).divide(maxs.subtract(mins))
  return normalized
}

// Calculate Slope and Elevation
var elev = alos.select('AVE_DSM').rename('elev');
var slope = ee.Terrain.slope(alos.select('AVE_DSM')).rename('slope');

var composite = (composite.addBands(elev).addBands(slope)).clip(geometry);
var composite = composite.select(['B2', 'B3', 'B4', 'B8', 'B11', 'B12', 'ndvi', 'ndwi', 'msavi2', 'slope', 'elev'])
var composite = normalize(composite);

//Run SNIC
var snic = ee.Algorithms.Image.Segmentation.SNIC({
  image: composite,
  compactness: 0,
  connectivity: 8,
  neighborhoodSize: 256,
  size: 3
}).select(['B2_mean', 'B3_mean', 'B4_mean', 'B8_mean', 'B11_mean', 'B12_mean', 'ndvi_mean', 'ndwi_mean', 'msavi2_mean', 'slope_mean', 'elev_mean', "clusters"], ['B2', 'B3', 'B4', 'B8', 'B11', 'B12', 'ndvi', 'ndwi', 'msavi2', 'slope', 'elev', 'clusters']);

var clusters = snic.select('clusters');
Map.addLayer(clusters.randomVisualizer(), {}, 'clusters')

var composite = composite.addBands(clusters).reduceConnectedComponents(ee.Reducer.mean(), 'clusters', 256)

var gcp = wetland.merge(water).merge(bare_ground).merge(grassland).merge(woodland).merge(shrubland);

// Add a random column and split the GCPs into training and validation set
var gcp = gcp.randomColumn()

// This being a simpler classification, we take 60% points
// for validation. Normal recommended ratio is
// 70% training, 30% validation
var trainingGcp = gcp.filter(ee.Filter.gt('random', 0.3));
var validationGcp = gcp.filter(ee.Filter.lte('random', 0.3));

// Overlay the point on the image to get training data.
var training = composite.sampleRegions({
  collection: trainingGcp,
  properties: ['landcover'],
  scale: 10,
  tileScale: 16
});

// Train a classifier.
var classifier = ee.Classifier.libsvm({
  kernelType: 'RBF',
  gamma: 0.7,
  cost: 150
}).train({
  features: training,  
  classProperty: 'landcover',
  inputProperties: composite.bandNames()
});

// Classify the image.
var classified = composite.classify(classifier);

Map.addLayer(classified, {min: 0, max: 5, palette: ['#0edfaa','#0c46ff','#dd8e35','#b8fa04','#21b800','#d6c745']}, 'classified');

//************************************************************************** 
// Accuracy Assessment
//************************************************************************** 

// Use classification map to assess accuracy using the validation fraction
// of the overall training set created above.
var test = classified.sampleRegions({
  collection: validationGcp,
  properties: ['landcover'],
  scale: 10,
  tileScale: 16
});

var testConfusionMatrix = test.errorMatrix('landcover', 'classification')
print('Confusion Matrix', testConfusionMatrix);
print('Test Accuracy', testConfusionMatrix.accuracy());
print("Consumer's accuracy", testConfusionMatrix.consumersAccuracy());
print("Producer's accuracy", testConfusionMatrix.producersAccuracy());
print('Kappa statistic', testConfusionMatrix.kappa());

Export.image.toDrive({
    image: classified,
    description: 'svm_classification',
    folder: 'earthengine',
    fileNamePrefix: 'svm_classification_wet_obia',
    region: geometry,
    scale: 10,
    maxPixels: 1e9
})


// Create a 2 band image with the area image and the classified image
// Divide the area image by 1e6 so area results are in Sq Km
var areaImage = ee.Image.pixelArea().divide(1e6).addBands(classified);

// Calculate Area by Class
// Using a Grouped Reducer
var areas = areaImage.reduceRegion({
      reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'classification',
    }),
    geometry: marakele,
    scale: 100,
    tileScale: 4,
    maxPixels: 1e10
    }); 

var classAreas = ee.List(areas.get('groups'))
print(classAreas)

var areaChart = ui.Chart.image.byClass({
  image: areaImage,
  classBand: 'classification', 
  region: marakele,
  scale: 100,
  reducer: ee.Reducer.sum(),
  classLabels: ['wetland', 'water', 'bare ground', 'grassland', 'woodland', 'shrubland'],
}).setOptions({
  hAxis: {title: 'Classes'},
  vAxis: {title: 'Area Km^2'},
  title: 'Area by class',
  series: {
    0: { color: '#11d6ad' },
    1: { color: '#1683ff' },
    2: { color: '#b27025' },
    3: { color: '#acff26' },
    4: { color: '#0bb815' },
    5: { color: '#dca74f' }
  }
});
print(areaChart);
